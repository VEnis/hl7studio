// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package io.github.venis.hl7studio.web;

import io.github.venis.hl7studio.model.Hl7ConnectorCharset;
import io.github.venis.hl7studio.model.Hl7ConnectorSinglePortMllpReceiver;
import io.github.venis.hl7studio.model.Hl7ConnectorState;
import io.github.venis.hl7studio.model.Hl7MessageEncoding;
import io.github.venis.hl7studio.service.api.Hl7ConnectorSinglePortMllpReceiverService;
import io.github.venis.hl7studio.web.Hl7ConnectorSinglePortMllpReceiversItemThymeleafController;
import io.github.venis.hl7studio.web.Hl7ConnectorSinglePortMllpReceiversItemThymeleafLinkFactory;
import io.springlets.web.NotFoundException;
import io.springlets.web.mvc.util.ControllerMethodLinkBuilderFactory;
import io.springlets.web.mvc.util.MethodLinkBuilderFactory;
import java.util.Arrays;
import java.util.Locale;
import javax.validation.Valid;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.util.UriComponents;

privileged aspect Hl7ConnectorSinglePortMllpReceiversItemThymeleafController_Roo_Thymeleaf {
    
    declare @type: Hl7ConnectorSinglePortMllpReceiversItemThymeleafController: @Controller;
    
    declare @type: Hl7ConnectorSinglePortMllpReceiversItemThymeleafController: @RequestMapping(value = "/hl7connectorsingleportmllpreceivers/{hl7ConnectorSinglePortMllpReceiver}", name = "Hl7ConnectorSinglePortMllpReceiversItemThymeleafController", produces = MediaType.TEXT_HTML_VALUE);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MessageSource Hl7ConnectorSinglePortMllpReceiversItemThymeleafController.messageSource;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MethodLinkBuilderFactory<Hl7ConnectorSinglePortMllpReceiversItemThymeleafController> Hl7ConnectorSinglePortMllpReceiversItemThymeleafController.itemLink;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param hl7ConnectorSinglePortMllpReceiverService
     * @param messageSource
     * @param linkBuilder
     */
    @Autowired
    public Hl7ConnectorSinglePortMllpReceiversItemThymeleafController.new(Hl7ConnectorSinglePortMllpReceiverService hl7ConnectorSinglePortMllpReceiverService, MessageSource messageSource, ControllerMethodLinkBuilderFactory linkBuilder) {
        setHl7ConnectorSinglePortMllpReceiverService(hl7ConnectorSinglePortMllpReceiverService);
        setMessageSource(messageSource);
        setItemLink(linkBuilder.of(Hl7ConnectorSinglePortMllpReceiversItemThymeleafController.class));
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return MessageSource
     */
    public MessageSource Hl7ConnectorSinglePortMllpReceiversItemThymeleafController.getMessageSource() {
        return messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param messageSource
     */
    public void Hl7ConnectorSinglePortMllpReceiversItemThymeleafController.setMessageSource(MessageSource messageSource) {
        this.messageSource = messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MethodLinkBuilderFactory
     */
    public MethodLinkBuilderFactory<Hl7ConnectorSinglePortMllpReceiversItemThymeleafController> Hl7ConnectorSinglePortMllpReceiversItemThymeleafController.getItemLink() {
        return itemLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param itemLink
     */
    public void Hl7ConnectorSinglePortMllpReceiversItemThymeleafController.setItemLink(MethodLinkBuilderFactory<Hl7ConnectorSinglePortMllpReceiversItemThymeleafController> itemLink) {
        this.itemLink = itemLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @param locale
     * @param method
     * @return Hl7ConnectorSinglePortMllpReceiver
     */
    @ModelAttribute
    public Hl7ConnectorSinglePortMllpReceiver Hl7ConnectorSinglePortMllpReceiversItemThymeleafController.getHl7ConnectorSinglePortMllpReceiver(@PathVariable("hl7ConnectorSinglePortMllpReceiver") Long id, Locale locale, HttpMethod method) {
        Hl7ConnectorSinglePortMllpReceiver hl7ConnectorSinglePortMllpReceiver = null;
        if (HttpMethod.PUT.equals(method)) {
            hl7ConnectorSinglePortMllpReceiver = hl7ConnectorSinglePortMllpReceiverService.findOneForUpdate(id);
        } else {
            hl7ConnectorSinglePortMllpReceiver = hl7ConnectorSinglePortMllpReceiverService.findOne(id);
        }
        
        if (hl7ConnectorSinglePortMllpReceiver == null) {
            String message = messageSource.getMessage("error_NotFound", new Object[] {"Hl7ConnectorSinglePortMllpReceiver", id}, "The record couldn't be found", locale);
            throw new NotFoundException(message);
        }
        return hl7ConnectorSinglePortMllpReceiver;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param hl7ConnectorSinglePortMllpReceiver
     * @param model
     * @return ModelAndView
     */
    @GetMapping(name = "show")
    public ModelAndView Hl7ConnectorSinglePortMllpReceiversItemThymeleafController.show(@ModelAttribute Hl7ConnectorSinglePortMllpReceiver hl7ConnectorSinglePortMllpReceiver, Model model) {
        model.addAttribute("hl7ConnectorSinglePortMllpReceiver", hl7ConnectorSinglePortMllpReceiver);
        return new ModelAndView("hl7connectorsingleportmllpreceivers/show");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param hl7ConnectorSinglePortMllpReceiver
     * @param model
     * @return ModelAndView
     */
    @GetMapping(value = "/inline", name = "showInline")
    public ModelAndView Hl7ConnectorSinglePortMllpReceiversItemThymeleafController.showInline(@ModelAttribute Hl7ConnectorSinglePortMllpReceiver hl7ConnectorSinglePortMllpReceiver, Model model) {
        model.addAttribute("hl7ConnectorSinglePortMllpReceiver", hl7ConnectorSinglePortMllpReceiver);
        return new ModelAndView("hl7connectorsingleportmllpreceivers/showInline :: inline-content");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param dataBinder
     */
    @InitBinder("hl7ConnectorSinglePortMllpReceiver")
    public void Hl7ConnectorSinglePortMllpReceiversItemThymeleafController.initHl7ConnectorSinglePortMllpReceiverBinder(WebDataBinder dataBinder) {
        dataBinder.setDisallowedFields("id");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void Hl7ConnectorSinglePortMllpReceiversItemThymeleafController.populateFormats(Model model) {
        model.addAttribute("application_locale", LocaleContextHolder.getLocale().getLanguage());
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void Hl7ConnectorSinglePortMllpReceiversItemThymeleafController.populateForm(Model model) {
        populateFormats(model);
        model.addAttribute("encoding", Arrays.asList(Hl7MessageEncoding.values()));
        model.addAttribute("charset", Arrays.asList(Hl7ConnectorCharset.values()));
        model.addAttribute("runState", Arrays.asList(Hl7ConnectorState.values()));
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param hl7ConnectorSinglePortMllpReceiver
     * @param model
     * @return ModelAndView
     */
    @GetMapping(value = "/edit-form", name = "editForm")
    public ModelAndView Hl7ConnectorSinglePortMllpReceiversItemThymeleafController.editForm(@ModelAttribute Hl7ConnectorSinglePortMllpReceiver hl7ConnectorSinglePortMllpReceiver, Model model) {
        populateForm(model);
        
        model.addAttribute("hl7ConnectorSinglePortMllpReceiver", hl7ConnectorSinglePortMllpReceiver);
        return new ModelAndView("hl7connectorsingleportmllpreceivers/edit");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param hl7ConnectorSinglePortMllpReceiver
     * @param version
     * @param concurrencyControl
     * @param result
     * @param model
     * @return ModelAndView
     */
    @PutMapping(name = "update")
    public ModelAndView Hl7ConnectorSinglePortMllpReceiversItemThymeleafController.update(@Valid @ModelAttribute Hl7ConnectorSinglePortMllpReceiver hl7ConnectorSinglePortMllpReceiver, @RequestParam("version") Integer version, @RequestParam(value = "concurrency", required = false, defaultValue = "") String concurrencyControl, BindingResult result, Model model) {
        // Check if provided form contain errors
        if (result.hasErrors()) {
            populateForm(model);
            
            return new ModelAndView("hl7connectorsingleportmllpreceivers/edit");
        }
        // Concurrency control
        Hl7ConnectorSinglePortMllpReceiver existingHl7ConnectorSinglePortMllpReceiver = getHl7ConnectorSinglePortMllpReceiverService().findOne(hl7ConnectorSinglePortMllpReceiver.getId());
        if(hl7ConnectorSinglePortMllpReceiver.getVersion() != existingHl7ConnectorSinglePortMllpReceiver.getVersion() && StringUtils.isEmpty(concurrencyControl)){
            populateForm(model);
            model.addAttribute("hl7ConnectorSinglePortMllpReceiver", hl7ConnectorSinglePortMllpReceiver);
            model.addAttribute("concurrency", true);
            return new ModelAndView("hl7connectorsingleportmllpreceivers/edit");
        } else if(hl7ConnectorSinglePortMllpReceiver.getVersion() != existingHl7ConnectorSinglePortMllpReceiver.getVersion() && "discard".equals(concurrencyControl)){
            populateForm(model);
            model.addAttribute("hl7ConnectorSinglePortMllpReceiver", existingHl7ConnectorSinglePortMllpReceiver);
            model.addAttribute("concurrency", false);
            return new ModelAndView("hl7connectorsingleportmllpreceivers/edit");
        } else if(hl7ConnectorSinglePortMllpReceiver.getVersion() != existingHl7ConnectorSinglePortMllpReceiver.getVersion() && "apply".equals(concurrencyControl)){
            // Update the version field to be able to override the existing values
            hl7ConnectorSinglePortMllpReceiver.setVersion(existingHl7ConnectorSinglePortMllpReceiver.getVersion());
        }
        Hl7ConnectorSinglePortMllpReceiver savedHl7ConnectorSinglePortMllpReceiver = getHl7ConnectorSinglePortMllpReceiverService().save(hl7ConnectorSinglePortMllpReceiver);
        UriComponents showURI = getItemLink().to(Hl7ConnectorSinglePortMllpReceiversItemThymeleafLinkFactory.SHOW).with("hl7ConnectorSinglePortMllpReceiver", savedHl7ConnectorSinglePortMllpReceiver.getId()).toUri();
        return new ModelAndView("redirect:" + showURI.toUriString());
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param hl7ConnectorSinglePortMllpReceiver
     * @return ResponseEntity
     */
    @ResponseBody
    @DeleteMapping(name = "delete")
    public ResponseEntity<?> Hl7ConnectorSinglePortMllpReceiversItemThymeleafController.delete(@ModelAttribute Hl7ConnectorSinglePortMllpReceiver hl7ConnectorSinglePortMllpReceiver) {
        getHl7ConnectorSinglePortMllpReceiverService().delete(hl7ConnectorSinglePortMllpReceiver);
        return ResponseEntity.ok().build();
    }
    
}
