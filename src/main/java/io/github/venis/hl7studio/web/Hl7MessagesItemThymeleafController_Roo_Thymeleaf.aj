// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package io.github.venis.hl7studio.web;

import io.github.venis.hl7studio.model.Hl7Message;
import io.github.venis.hl7studio.service.api.Hl7MessageService;
import io.github.venis.hl7studio.web.Hl7MessagesItemThymeleafController;
import io.github.venis.hl7studio.web.Hl7MessagesItemThymeleafLinkFactory;
import io.springlets.web.NotFoundException;
import io.springlets.web.mvc.util.ControllerMethodLinkBuilderFactory;
import io.springlets.web.mvc.util.MethodLinkBuilderFactory;
import java.util.Locale;
import javax.validation.Valid;
import org.apache.commons.lang3.StringUtils;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.util.UriComponents;

privileged aspect Hl7MessagesItemThymeleafController_Roo_Thymeleaf {
    
    declare @type: Hl7MessagesItemThymeleafController: @Controller;
    
    declare @type: Hl7MessagesItemThymeleafController: @RequestMapping(value = "/hl7messages/{hl7Message}", name = "Hl7MessagesItemThymeleafController", produces = MediaType.TEXT_HTML_VALUE);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MessageSource Hl7MessagesItemThymeleafController.messageSource;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MethodLinkBuilderFactory<Hl7MessagesItemThymeleafController> Hl7MessagesItemThymeleafController.itemLink;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param hl7MessageService
     * @param messageSource
     * @param linkBuilder
     */
    @Autowired
    public Hl7MessagesItemThymeleafController.new(Hl7MessageService hl7MessageService, MessageSource messageSource, ControllerMethodLinkBuilderFactory linkBuilder) {
        setHl7MessageService(hl7MessageService);
        setMessageSource(messageSource);
        setItemLink(linkBuilder.of(Hl7MessagesItemThymeleafController.class));
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return MessageSource
     */
    public MessageSource Hl7MessagesItemThymeleafController.getMessageSource() {
        return messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param messageSource
     */
    public void Hl7MessagesItemThymeleafController.setMessageSource(MessageSource messageSource) {
        this.messageSource = messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MethodLinkBuilderFactory
     */
    public MethodLinkBuilderFactory<Hl7MessagesItemThymeleafController> Hl7MessagesItemThymeleafController.getItemLink() {
        return itemLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param itemLink
     */
    public void Hl7MessagesItemThymeleafController.setItemLink(MethodLinkBuilderFactory<Hl7MessagesItemThymeleafController> itemLink) {
        this.itemLink = itemLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @param locale
     * @param method
     * @return Hl7Message
     */
    @ModelAttribute
    public Hl7Message Hl7MessagesItemThymeleafController.getHl7Message(@PathVariable("hl7Message") Long id, Locale locale, HttpMethod method) {
        Hl7Message hl7Message = null;
        if (HttpMethod.PUT.equals(method)) {
            hl7Message = hl7MessageService.findOneForUpdate(id);
        } else {
            hl7Message = hl7MessageService.findOne(id);
        }
        
        if (hl7Message == null) {
            String message = messageSource.getMessage("error_NotFound", new Object[] {"Hl7Message", id}, "The record couldn't be found", locale);
            throw new NotFoundException(message);
        }
        return hl7Message;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param hl7Message
     * @param model
     * @return ModelAndView
     */
    @GetMapping(name = "show")
    public ModelAndView Hl7MessagesItemThymeleafController.show(@ModelAttribute Hl7Message hl7Message, Model model) {
        model.addAttribute("hl7Message", hl7Message);
        return new ModelAndView("hl7messages/show");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param hl7Message
     * @param model
     * @return ModelAndView
     */
    @GetMapping(value = "/inline", name = "showInline")
    public ModelAndView Hl7MessagesItemThymeleafController.showInline(@ModelAttribute Hl7Message hl7Message, Model model) {
        model.addAttribute("hl7Message", hl7Message);
        return new ModelAndView("hl7messages/showInline :: inline-content");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param dataBinder
     */
    @InitBinder("hl7Message")
    public void Hl7MessagesItemThymeleafController.initHl7MessageBinder(WebDataBinder dataBinder) {
        dataBinder.setDisallowedFields("id");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void Hl7MessagesItemThymeleafController.populateFormats(Model model) {
        model.addAttribute("application_locale", LocaleContextHolder.getLocale().getLanguage());
        model.addAttribute("hl7DateTimeOfMessage_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void Hl7MessagesItemThymeleafController.populateForm(Model model) {
        populateFormats(model);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param hl7Message
     * @param model
     * @return ModelAndView
     */
    @GetMapping(value = "/edit-form", name = "editForm")
    public ModelAndView Hl7MessagesItemThymeleafController.editForm(@ModelAttribute Hl7Message hl7Message, Model model) {
        populateForm(model);
        
        model.addAttribute("hl7Message", hl7Message);
        return new ModelAndView("hl7messages/edit");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param hl7Message
     * @param version
     * @param concurrencyControl
     * @param result
     * @param model
     * @return ModelAndView
     */
    @PutMapping(name = "update")
    public ModelAndView Hl7MessagesItemThymeleafController.update(@Valid @ModelAttribute Hl7Message hl7Message, @RequestParam("version") Integer version, @RequestParam(value = "concurrency", required = false, defaultValue = "") String concurrencyControl, BindingResult result, Model model) {
        // Check if provided form contain errors
        if (result.hasErrors()) {
            populateForm(model);
            
            return new ModelAndView("hl7messages/edit");
        }
        // Concurrency control
        Hl7Message existingHl7Message = getHl7MessageService().findOne(hl7Message.getId());
        if(hl7Message.getVersion() != existingHl7Message.getVersion() && StringUtils.isEmpty(concurrencyControl)){
            populateForm(model);
            model.addAttribute("hl7Message", hl7Message);
            model.addAttribute("concurrency", true);
            return new ModelAndView("hl7messages/edit");
        } else if(hl7Message.getVersion() != existingHl7Message.getVersion() && "discard".equals(concurrencyControl)){
            populateForm(model);
            model.addAttribute("hl7Message", existingHl7Message);
            model.addAttribute("concurrency", false);
            return new ModelAndView("hl7messages/edit");
        } else if(hl7Message.getVersion() != existingHl7Message.getVersion() && "apply".equals(concurrencyControl)){
            // Update the version field to be able to override the existing values
            hl7Message.setVersion(existingHl7Message.getVersion());
        }
        Hl7Message savedHl7Message = getHl7MessageService().save(hl7Message);
        UriComponents showURI = getItemLink().to(Hl7MessagesItemThymeleafLinkFactory.SHOW).with("hl7Message", savedHl7Message.getId()).toUri();
        return new ModelAndView("redirect:" + showURI.toUriString());
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param hl7Message
     * @return ResponseEntity
     */
    @ResponseBody
    @DeleteMapping(name = "delete")
    public ResponseEntity<?> Hl7MessagesItemThymeleafController.delete(@ModelAttribute Hl7Message hl7Message) {
        getHl7MessageService().delete(hl7Message);
        return ResponseEntity.ok().build();
    }
    
}
