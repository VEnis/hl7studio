// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package io.github.venis.hl7studio.web;

import io.github.venis.hl7studio.model.Hl7ConnectorCharset;
import io.github.venis.hl7studio.model.Hl7ConnectorDualPortMllpReceiver;
import io.github.venis.hl7studio.model.Hl7ConnectorState;
import io.github.venis.hl7studio.model.Hl7MessageEncoding;
import io.github.venis.hl7studio.service.api.Hl7ConnectorDualPortMllpReceiverService;
import io.github.venis.hl7studio.web.Hl7ConnectorDualPortMllpReceiversItemThymeleafController;
import io.github.venis.hl7studio.web.Hl7ConnectorDualPortMllpReceiversItemThymeleafLinkFactory;
import io.springlets.web.NotFoundException;
import io.springlets.web.mvc.util.ControllerMethodLinkBuilderFactory;
import io.springlets.web.mvc.util.MethodLinkBuilderFactory;
import java.util.Arrays;
import java.util.Locale;
import javax.validation.Valid;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.util.UriComponents;

privileged aspect Hl7ConnectorDualPortMllpReceiversItemThymeleafController_Roo_Thymeleaf {
    
    declare @type: Hl7ConnectorDualPortMllpReceiversItemThymeleafController: @Controller;
    
    declare @type: Hl7ConnectorDualPortMllpReceiversItemThymeleafController: @RequestMapping(value = "/hl7connectordualportmllpreceivers/{hl7ConnectorDualPortMllpReceiver}", name = "Hl7ConnectorDualPortMllpReceiversItemThymeleafController", produces = MediaType.TEXT_HTML_VALUE);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MessageSource Hl7ConnectorDualPortMllpReceiversItemThymeleafController.messageSource;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MethodLinkBuilderFactory<Hl7ConnectorDualPortMllpReceiversItemThymeleafController> Hl7ConnectorDualPortMllpReceiversItemThymeleafController.itemLink;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param hl7ConnectorDualPortMllpReceiverService
     * @param messageSource
     * @param linkBuilder
     */
    @Autowired
    public Hl7ConnectorDualPortMllpReceiversItemThymeleafController.new(Hl7ConnectorDualPortMllpReceiverService hl7ConnectorDualPortMllpReceiverService, MessageSource messageSource, ControllerMethodLinkBuilderFactory linkBuilder) {
        setHl7ConnectorDualPortMllpReceiverService(hl7ConnectorDualPortMllpReceiverService);
        setMessageSource(messageSource);
        setItemLink(linkBuilder.of(Hl7ConnectorDualPortMllpReceiversItemThymeleafController.class));
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return MessageSource
     */
    public MessageSource Hl7ConnectorDualPortMllpReceiversItemThymeleafController.getMessageSource() {
        return messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param messageSource
     */
    public void Hl7ConnectorDualPortMllpReceiversItemThymeleafController.setMessageSource(MessageSource messageSource) {
        this.messageSource = messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MethodLinkBuilderFactory
     */
    public MethodLinkBuilderFactory<Hl7ConnectorDualPortMllpReceiversItemThymeleafController> Hl7ConnectorDualPortMllpReceiversItemThymeleafController.getItemLink() {
        return itemLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param itemLink
     */
    public void Hl7ConnectorDualPortMllpReceiversItemThymeleafController.setItemLink(MethodLinkBuilderFactory<Hl7ConnectorDualPortMllpReceiversItemThymeleafController> itemLink) {
        this.itemLink = itemLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @param locale
     * @param method
     * @return Hl7ConnectorDualPortMllpReceiver
     */
    @ModelAttribute
    public Hl7ConnectorDualPortMllpReceiver Hl7ConnectorDualPortMllpReceiversItemThymeleafController.getHl7ConnectorDualPortMllpReceiver(@PathVariable("hl7ConnectorDualPortMllpReceiver") Long id, Locale locale, HttpMethod method) {
        Hl7ConnectorDualPortMllpReceiver hl7ConnectorDualPortMllpReceiver = null;
        if (HttpMethod.PUT.equals(method)) {
            hl7ConnectorDualPortMllpReceiver = hl7ConnectorDualPortMllpReceiverService.findOneForUpdate(id);
        } else {
            hl7ConnectorDualPortMllpReceiver = hl7ConnectorDualPortMllpReceiverService.findOne(id);
        }
        
        if (hl7ConnectorDualPortMllpReceiver == null) {
            String message = messageSource.getMessage("error_NotFound", new Object[] {"Hl7ConnectorDualPortMllpReceiver", id}, "The record couldn't be found", locale);
            throw new NotFoundException(message);
        }
        return hl7ConnectorDualPortMllpReceiver;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param hl7ConnectorDualPortMllpReceiver
     * @param model
     * @return ModelAndView
     */
    @GetMapping(name = "show")
    public ModelAndView Hl7ConnectorDualPortMllpReceiversItemThymeleafController.show(@ModelAttribute Hl7ConnectorDualPortMllpReceiver hl7ConnectorDualPortMllpReceiver, Model model) {
        model.addAttribute("hl7ConnectorDualPortMllpReceiver", hl7ConnectorDualPortMllpReceiver);
        return new ModelAndView("hl7connectordualportmllpreceivers/show");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param hl7ConnectorDualPortMllpReceiver
     * @param model
     * @return ModelAndView
     */
    @GetMapping(value = "/inline", name = "showInline")
    public ModelAndView Hl7ConnectorDualPortMllpReceiversItemThymeleafController.showInline(@ModelAttribute Hl7ConnectorDualPortMllpReceiver hl7ConnectorDualPortMllpReceiver, Model model) {
        model.addAttribute("hl7ConnectorDualPortMllpReceiver", hl7ConnectorDualPortMllpReceiver);
        return new ModelAndView("hl7connectordualportmllpreceivers/showInline :: inline-content");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param dataBinder
     */
    @InitBinder("hl7ConnectorDualPortMllpReceiver")
    public void Hl7ConnectorDualPortMllpReceiversItemThymeleafController.initHl7ConnectorDualPortMllpReceiverBinder(WebDataBinder dataBinder) {
        dataBinder.setDisallowedFields("id");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void Hl7ConnectorDualPortMllpReceiversItemThymeleafController.populateFormats(Model model) {
        model.addAttribute("application_locale", LocaleContextHolder.getLocale().getLanguage());
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void Hl7ConnectorDualPortMllpReceiversItemThymeleafController.populateForm(Model model) {
        populateFormats(model);
        model.addAttribute("encoding", Arrays.asList(Hl7MessageEncoding.values()));
        model.addAttribute("charset", Arrays.asList(Hl7ConnectorCharset.values()));
        model.addAttribute("runState", Arrays.asList(Hl7ConnectorState.values()));
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param hl7ConnectorDualPortMllpReceiver
     * @param model
     * @return ModelAndView
     */
    @GetMapping(value = "/edit-form", name = "editForm")
    public ModelAndView Hl7ConnectorDualPortMllpReceiversItemThymeleafController.editForm(@ModelAttribute Hl7ConnectorDualPortMllpReceiver hl7ConnectorDualPortMllpReceiver, Model model) {
        populateForm(model);
        
        model.addAttribute("hl7ConnectorDualPortMllpReceiver", hl7ConnectorDualPortMllpReceiver);
        return new ModelAndView("hl7connectordualportmllpreceivers/edit");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param hl7ConnectorDualPortMllpReceiver
     * @param version
     * @param concurrencyControl
     * @param result
     * @param model
     * @return ModelAndView
     */
    @PutMapping(name = "update")
    public ModelAndView Hl7ConnectorDualPortMllpReceiversItemThymeleafController.update(@Valid @ModelAttribute Hl7ConnectorDualPortMllpReceiver hl7ConnectorDualPortMllpReceiver, @RequestParam("version") Integer version, @RequestParam(value = "concurrency", required = false, defaultValue = "") String concurrencyControl, BindingResult result, Model model) {
        // Check if provided form contain errors
        if (result.hasErrors()) {
            populateForm(model);
            
            return new ModelAndView("hl7connectordualportmllpreceivers/edit");
        }
        // Concurrency control
        Hl7ConnectorDualPortMllpReceiver existingHl7ConnectorDualPortMllpReceiver = getHl7ConnectorDualPortMllpReceiverService().findOne(hl7ConnectorDualPortMllpReceiver.getId());
        if(hl7ConnectorDualPortMllpReceiver.getVersion() != existingHl7ConnectorDualPortMllpReceiver.getVersion() && StringUtils.isEmpty(concurrencyControl)){
            populateForm(model);
            model.addAttribute("hl7ConnectorDualPortMllpReceiver", hl7ConnectorDualPortMllpReceiver);
            model.addAttribute("concurrency", true);
            return new ModelAndView("hl7connectordualportmllpreceivers/edit");
        } else if(hl7ConnectorDualPortMllpReceiver.getVersion() != existingHl7ConnectorDualPortMllpReceiver.getVersion() && "discard".equals(concurrencyControl)){
            populateForm(model);
            model.addAttribute("hl7ConnectorDualPortMllpReceiver", existingHl7ConnectorDualPortMllpReceiver);
            model.addAttribute("concurrency", false);
            return new ModelAndView("hl7connectordualportmllpreceivers/edit");
        } else if(hl7ConnectorDualPortMllpReceiver.getVersion() != existingHl7ConnectorDualPortMllpReceiver.getVersion() && "apply".equals(concurrencyControl)){
            // Update the version field to be able to override the existing values
            hl7ConnectorDualPortMllpReceiver.setVersion(existingHl7ConnectorDualPortMllpReceiver.getVersion());
        }
        Hl7ConnectorDualPortMllpReceiver savedHl7ConnectorDualPortMllpReceiver = getHl7ConnectorDualPortMllpReceiverService().save(hl7ConnectorDualPortMllpReceiver);
        UriComponents showURI = getItemLink().to(Hl7ConnectorDualPortMllpReceiversItemThymeleafLinkFactory.SHOW).with("hl7ConnectorDualPortMllpReceiver", savedHl7ConnectorDualPortMllpReceiver.getId()).toUri();
        return new ModelAndView("redirect:" + showURI.toUriString());
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param hl7ConnectorDualPortMllpReceiver
     * @return ResponseEntity
     */
    @ResponseBody
    @DeleteMapping(name = "delete")
    public ResponseEntity<?> Hl7ConnectorDualPortMllpReceiversItemThymeleafController.delete(@ModelAttribute Hl7ConnectorDualPortMllpReceiver hl7ConnectorDualPortMllpReceiver) {
        getHl7ConnectorDualPortMllpReceiverService().delete(hl7ConnectorDualPortMllpReceiver);
        return ResponseEntity.ok().build();
    }
    
}
